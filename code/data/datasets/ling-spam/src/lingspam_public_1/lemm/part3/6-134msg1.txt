Subject: n - ary v . binary

lloyd anderson ask how n-ary ( for n greater than 2 ) comparison could ever be worse than binary . consider the problem of head and tail when we toss coin . what be the chance of two coin ( stand for two language obviously ) both come up the same ( i . e . , both head or both tail ) when toss once ? since there be four possible outcome of the binary toss , namely , hh , ht , tt , and th , and only two where both come up the same , the chance be 50 % . but now consider what happen when we toss three coin ( stand for three language ) . since a coin only have two side , in each possible outcome at least two of the coin come up the same . so the chance of 2 out of 3 come up the same ( which would correspond to say let two out of three language agree in something and then they be relate ) be 100 % ( which means this be not a valid test for relatedness ) . of course , if we have want all 3 out 3 to come up the same , then the situation would be drastically different , but in linguistics n-ary comparison never to my knowledge involve such a requirement . however , the only reason that n-ary comparison do so poorly here be that ( a ) there be only two possible outcome per language , i . e . , language come in only two variety , and ( b ) the number of language be compare be small ( only three ) . the ( a ) part be the one where real linguistic application be drastically different from our little coin-toss game ( since when you look for language relationship , you be look at hundred or thousand or maybe even more possibility , not two , because you be look at phonological shape of morpheme mostly , and these allow lot of possibility , at least thousand ) . so in the real situation that alone insure that n-ary comparison be better than binary . but it be also true that if you increase the number of coin ( language ) in ( b ) , that also have the same effect . but you still have to be careful : the main concern be that give n language be compare you must worry about how many out of the n be require to agree and about not make that number too small ( if you do , then again chance tend to take over ) . which raise a question : be there any publish work on compare language which explicitly calculate these number ( and do it right ) ? alexis mr
