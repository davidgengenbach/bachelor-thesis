MIME-Version: 1.0
Server: CERN/3.0
Date: Monday, 06-Jan-97 20:30:22 GMT
Content-Type: text/html
Content-Length: 19230
Last-Modified: Friday, 15-Nov-96 15:47:58 GMT

<HTML>
<HEAD>
<TITLE>
CS195T: Introduction to Graduate Computer Science
</TITLE>
<LINK REV="made" HREF="mailto:rdb@cs.utexas.edu">
</HEAD>
<BODY>

<!-- ====================================================================== -->

<h1 align=center>CS195T:<br>Introduction to Graduate Computer Science</h1>
<h2 align=center>Fall 1996 (47865)</h2>

<ul>
<li> Lecture: Monday, 12:00 - 1:00, in TAY 2.106.
<li> Instructor: <!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><!WA0><a href="http://www.cs.utexas.edu/users/rdb">Robert Blumofe</a>
<ul>
<li> Office: Taylor 4.118
<li> Phone: 471-9557
<li> Email: <!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><!WA1><a href="mailto:rdb@cs.utexas.edu"><kbd>rdb@cs.utexas.edu</kbd></a>
<li> Office hours: Thursday 1:30 - 3:30,
but feel free to stop by any time.
</ul>
</ul>

<!-- ====================================================================== -->

<hr>

<!-- Put any announcements here. -->

<p>
This is a one-semester seminar course that can only be taken on a
pass/fail basis. For graduate students, the course is <em>CS 195T:
Introduction to Graduate Computer Science</em>. For undergraduates,
the course is <em>CS 178: Undergraduate Topics in Computer Science
(Honors)</em> (47730).  To receive credit for the course, a student must be
registered for the course, and attend at least 11 of the 13 lectures.
</p>

<p>
<table border>
<caption><h2>Schedule</h2></caption>

<tr>
<th align=right></th>
<th>Speaker</th>
<th>Title</th>
</tr>

<tr>
<th align=right>September 9</th>
<td><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><!WA2><a href="http://www.cs.utexas.edu/users/miranker">Dan Miranker</a></td>
<td><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><!WA3><a href="#miranker">Alamo: The Net as a Data Warehouse</a></td>
</tr>

<tr>
<th align=right>September 16</th>
<td><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><!WA4><a href="http://www.cs.utexas.edu/users/kuipers">Ben Kuipers</a></td>
<td><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><!WA5><a href="#kuipers">The Spatial Semantic Hierarchy for Human
and Robot Cognitive Maps</a></td>
</tr>

<tr>
<th align=right>September 23</th>
<td><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><!WA6><a href="http://www.cs.utexas.edu/users/rdb">Robert Blumofe</a></td>
<td><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><!WA7><a href="#blumofe">Cilk and Cilk-NOW: Adaptive and Reliable
Parallel Computing on Networks of Workstations</a></td>
</tr>

<tr>
<th align=right>September 30</th>
<td><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><!WA8><a href="http://www.cs.utexas.edu/users/risto">Risto Miikkulainen</a></td>
<td><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><!WA9><a href="#risto">Learning Sequential Decision Tasks Through
Symbiotic Evolution of Neural Networks</a></td>
</tr>

<tr>
<th align=right>October 7</th>
<td><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><!WA10><a href="http://www.cs.utexas.edu/users/vl">Vladimir Lifschitz</a></td>
<td><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><!WA11><a href="#vl">Mathematical Principles of Logic Programming</a></td>
</tr>

<tr>
<th align=right>October 14</th>
<td><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><!WA12><a href="http://www.cs.utexas.edu/users/wilson">Paul Wilson</a></td>
<td><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><!WA13><a href="#wilson">Extensible Languages, Open Compilers,
and Reflection</a></td>
</tr>

<tr>
<th align=right>October 21</th>
<td><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><!WA14><a href="http://www.cs.utexas.edu/users/mooney">Ray Mooney</a></td>
<td><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><!WA15><a href="#mooney">Learning to Process Natural Language Using
Inductive Logic Programming</a></td>
</tr>

<tr>
<th align=right>October 28</th>
<td><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><!WA16><a href="http://www.cs.utexas.edu/users/dahlin">Mike Dahlin</a></td>
<td><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><!WA17><a href="#dahlin">Distributed I/O: from Clusters to Internets</a></td>

</tr>

<tr>
<th align=right>November 4</th>
<td><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><!WA18><a href="http://www.cs.utexas.edu/users/novak">Gordon Novak</a></td>
<td><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><!WA19><a href="#novak">Software Reuse by Specialization of Generic
Procedures through Views</a></td>
</tr>

<tr>
<th align=right>November 11</th>
<td><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><!WA20><a href="http://www.cs.utexas.edu/users/vlr">Vijaya Ramachandran</a></td>
<td><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><!WA21><a href="#vlr">The Design and Evaluation of Parallel
Algorithms</a></td>
</tr>

<tr>
<th align=right>November 18</th>
<td><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><!WA22><a href="http://www.cs.utexas.edu/users/lorenzo">Lorenzo Alvisi</a></td>
<td><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><!WA23><a href="#lorenzo">Lighweight fault-tolerance</a></td>
</tr>

<tr>
<th align=right>November 25</th>
<td><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><!WA24><a href="http://www.cs.utexas.edu/users/lin">Calvin Lin</a></td>
<td><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><!WA25><a href="#lin">Adaptive Libraries and High Level Optimization</a></td>
</tr>

<tr>
<th align=right>December 2</th>
<td><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><!WA26><a href="http://www.cs.utexas.edu/users/UTCS/report/1995/profiles/plaxton.html">
Greg Plaxton</a></td>
<td><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><!WA27><a href="#plaxton">Analysis of Algorithms</a></td>
</tr>

</table>
</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="lorenzo">
Lighweight fault-tolerance</a></h2>
<h2 align=center><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><!WA28><a href="http://www.cs.utexas.edu/users/lorenzo">Lorenzo Alvisi</a></h2>

<p>Distributed systems have moved beyond the confines of academia and
research labs and are revolutionizing the way in which businesses,
governmental organizations, and simple citizens are processing and
collecting information. Current technological trends promise to
dramatically increase the pace of this revolution by enabling the
design of highly cooperative distributed applications that go beyond
the client-server paradigm to harness the computational power of
distributed systems.</p>

<p>In this new environment, the scope and emphasis of fault-tolerant
techniques are about to undergo dramatic changes. Fault-tolerance will
cease to be an expensive feature required by a handful of applications
to tolerate exotic failures.  To the users of a highly distributed
information infrastructure, fault-tolerance will translate to a
competitive advantage, guaranteeing reliable access to critical
information.</p>

<p>In this talk we will explore a new way to design and engineer
fault-tolerant solutions, which we call lightweight fault-tolerance.
The goals of lightweight fault-tolerance are:
<ul>
<li>To require few dedicated resources and have a negligible
impact on performance during failure-free executions.</li>
<li>To scale its cost depending on the severity and number of
failures that need to be tolerated.</li>
<li>To integrate with applications in a way transparent to the
application programmer.</li>
<li>To enable and support emerging applications that will communicate
through messages as well as files.</li>
<li>To address software-generated faults effectively.</li>
</ul></p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="blumofe">
Cilk and Cilk-NOW: Adaptive and Reliable Parallel Computing on
Networks of Workstations</a></h2>
<h2 align=center><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><!WA29><a href="http://www.cs.utexas.edu/users/rdb">Robert Blumofe</a></h2>

<p>This presentation overviews <dfn>Cilk</dfn> (pronounced
&quot;silk&quot;), an algorithmic parallel multithreaded language, and
<dfn>Cilk-NOW</dfn>, a runtime system that supports a functional
subset of Cilk on networks of workstations.  Cilk-NOW provides
&quot;adaptive parallelism&quot; and fault tolerance tranparently to
user programs.  <dfn>Adaptive parallelism</dfn> means that the set of
workstations on which a Cilk program runs can grow and shrink
dynamically depending on the availability of idle workstations and on
the amount of parallelism within the program.  In addition, a Cilk
program can continue execution even if one or more of its workstations
crashes, because the Cilk-NOW runtime system automatically detects and
recovers from such failures.  The presentation includes a live
demonstration.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="dahlin">
Distributed I/O: from Clusters to Internets</a></h2>
<h2 align=center><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><!WA30><a href="http://www.cs.utexas.edu/users/dahlin">Mike Dahlin</a></h2>

<p>This presentation gives an overview of current issues in
distributed file system I/O. Technology trends and new applications
motivate more aggressive cluster and wide area network I/O systems. In
clusters, fast networks allow machines to cooperate closely to service
I/O requests. The xFS file system uses close cooperation among nodes
to provide better performance and availability than a single central
server. In wide area networks, the challenge is to provide good
performance, availability, and consistency despite limited network
performance and node or network failures. The wFS file system project
will explore these issues.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="kuipers">
The Spatial Semantic Hierarchy for Human and Robot Cognitive Maps
</a></h2>
<h2 align=center><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><!WA31><a href="http://www.cs.utexas.edu/users/kuipers">Benjamin Kuipers</a></h2>

<p>Human cognitive maps rely on several different representations for
large-scale space, each with its own ontology.  Similarly, a variety
of different approaches have been proposed for robot exploration and
mapping of unknown environments.  We cast these diverse
representations into a natural structure that we call the Spatial
Semantic Hierarchy (SSH), in which the objects, relations, and
assumptions at each level are abstracted from the levels below.</p>

<p>Each level of the SSH has its own mathematical foundation.  The
control level allows the robot and its environment to be formalized as
a continuous dynamical system, whose stable equilibrium points can be
abstracted to a discrete set of &quot;distinctive states.&quot;
Trajectories linking these states can be abstracted to actions, giving
a discrete causal graph representation of the state space.  The causal
graph of states and actions can in turn be abstracted to a topological
network of places and paths.  Local metrical models, such as occupancy
grids, of neighborhoods of places and paths can then be built on the
framework of the topological network without their usual problems of
global consistency.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="vl">
Mathematical Principles of Logic Programming</a></h2>
<h2 align=center><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><!WA32><a href="http://www.cs.utexas.edu/users/vl">Vladimir Lifschitz</a></h2>

<p>Logic programming, as well as its sister approach, functional
programming, is based on the view that a computer program does not
need to contain any explicit operational instructions.  Instead, it
can simply provide a set of facts about the problem that is sufficient
to solve it.  Such a &quot;declarative&quot; program can be executed
using methods of automated reasoning.  Prolog is the best known logic
programming language.</p>

<p>The mathematical theory of logic programming is concerned with
defining the semantics of logic programming languages, describing the
reasoning algorithms used to implement them, and investigating the
soundness of these algorithms.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="lin">
Adaptive Libraries and High Level Optimization</a></h2>
<h2 align=center><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><!WA33><a href="http://www.cs.utexas.edu/users/lin">Calvin Lin</a></h2>

<p>This talk describes a new approach to building software libraries.
By making libraries that can adapt---in both their implementation and
their interfaces---to different application needs and different
hardware platforms, we can produce libraries that are more efficient
and more widely usable.  We describe a new framework for building such
libraries, we describe three planned experiments that apply these
techniques to libraries for parallel scientific computation, and we
explain how our approach facilitates high level optimizations.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="risto">
Learning Sequential Decision Tasks Through Symbiotic Evolution of
Neural Networks</a></h2>
<h2 align=center><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><!WA34><a href="http://www.cs.utexas.edu/users/risto">Risto Miikkulainen</a></h2>

<p>A novel reinforcement learning method called <dfn>SANE</dfn>
(Symbiotic, Adaptive Neuro-Evolution) evolves a population of neurons
through genetic algorithms to form a neural network for a given task.
Symbiotic evolution promotes both cooperation and specialization in
the population, which results in a fast, efficient genetic search and
discourages convergence to suboptimal solutions.  SANE is able to
extract domain-specific information even under sparse reinforcement,
which makes it an effective approach to a broad range of sequential
decision tasks such as robot control, game playing, and resource
management.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="miranker">
Alamo: The Net as a Data Warehouse</a></h2>
<h2 align=center><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><!WA35><a href="http://www.cs.utexas.edu/users/miranker">Dan Miranker</a></h2>

<p>The Alamo effort is directed at intra-net development, and
inter-net users who can enumerate interesting sites and data
sources. The goal is to integrate the data sources and provide the
user with the illusion of a single virtual database, followed by
query, analysis and presentation tools.</p>

<p>Central to the Alamo architecture is a software bus called the
Abstract Search Machine (ASM). The ASM is a CORBA compliant interface
that provides a uniform interface to heterogeneous data
sources. Beyond simple data access, the ASM embodies a higher level of
abstraction enabling the efficient coding of clever search algorithms
and separating and isolating system concerns, including buffering and
data prefetch.</p>

<p>The broad claim is that high performance, often optimal,
implementations of advanced database facilities such as an
object-oriented query engine, a deductive inference engine, an active
database engine and data mining facilities can all be constructed
using the ASM as a common interface.</p>

<p>Finally, since the output of each of these advanced database
facilities can themselves serve as data sources, the components of the
Alamo architecture can be composed to resolve higher level data
integration problems. In particular we anticipate using the elements
of Alamo itself to represent meta-data and resolve both structural and
semantic conflicts among the data sources. Ultimately, further
compositions will embody complex knowledge-bases and be able to answer
high-level queries.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="mooney">
Learning to Process Natural Language Using Inductive Logic
Programming</a></h2>
<h2 align=center><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><!WA36><a href="http://www.cs.utexas.edu/users/mooney">Raymond J. Mooney</a></h2>

<p>Inductive Logic Programming (ILP) addresses the problem of learning
Prolog programs from examples.  The representational power of
first-order logic offers advantages over standard machine learning
methods constrained to use fixed-length feature vectors.  We are
applying ILP methods to natural-language learning where we believe
this richer representation offers important advantages.  We have
developed an ILP system, CHILL, for learning deterministic parsers
from a corpus of parsed sentences. CHILL obtains superior results on
several artificial corpora previously used to test neural-network
methods, and encouraging results on the more realistic ATIS corpus of
airline queries.  CHILL has also been used to the automatically
develop a complete natural-language interface that translates English
database queries into executable Prolog form, producing a more
accurate parser than a hand-built system for querying a small
geographic database.  We have also developed an ILP system, FOIDL,
which has been applied to learning the past tense of English,
surpassing the previous results of neural-network and decision-tree
methods on this problem.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="novak">
Software Reuse by Specialization of Generic Procedures through
Views</a></h2>
<h2 align=center><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><!WA37><a href="http://www.cs.utexas.edu/users/novak">Gordon S. Novak Jr.</a></h2>

<p>Software reuse is clearly a good idea, but it is difficult to
achieve in practice: if your data does not fit the assumptions of the
software, reusing the software will be difficult.  In our approach,
views describe how application data types implement the abstract types
used in generic procedures.  A compilation process can specialize a
generic procedure to produce a version that is customized for the
application data.  Graphical user interfaces make it easy to specify
views.  An Automatic Programming Server has been implemented on the
World Wide Web; it will write specialized programs for the user, in a
desired language, and serve the source code to the user as a file.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="plaxton">
Analysis of Algorithms</a></h2>
<h2 align=center><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><!WA38><a href="http://www.cs.utexas.edu/users/UTCS/report/1995/profiles/plaxton.html">
Greg Plaxton</a></h2>

<p>A major focus of theoretical computer science is the design and
analysis of asymptotically efficient algorithms
(sequential/parallel/distributed, deterministic/randomized) for
specific computational problems.  In this research area, it is not
uncommon to come across well-written papers in which, informally: (i)
the main underlying ideas are conceptually straightforward, (ii) the
formal presentation is surprisingly lengthy, and (iii) most of the
formalism deals with minor side-issues and special cases that have
little or nothing to do with the main underlying ideas.  In such
papers, there seems to be a significant gap between the conceptual and
formal difficulty of the algorithm being presented.  Are such gaps
inherent, or is conventional mathematical notation simply inadequate
for succinctly formalizing certain conceptually straightforward
algorithmic ideas?</p>

<p>In this talk, I will describe a notation for asymptotic analysis,
called $O_i$-notation, that significantly reduces the
&quot;conceptual-to-formal gap&quot; associated with a non-trivial
class of algorithms.  As a concrete example, I consider the analysis
of the well-known linear-time selection algorithm due to Blum, Floyd,
Pratt, Rivest, and Tarjan.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="vlr">
The Design and Evaluation of Parallel Algorithms</a></h2>
<h2 align=center><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><!WA39><a href="http://www.cs.utexas.edu/users/vlr">Vijaya Ramachandran</a></h2>

<p>The design and analysis of efficient parallel algorithms for
combinatorial problems has been an area of extensive study in recent
years, and a large number of algorithms have been developed on the
abstract PRAM model of parallel computation.  In this talk we will
describe some of our work in the design of efficient parallel
algorithms, and our experience with implementing and evaluating these
algorithms on a massively parallel machine (Maspar MP-1). We will then
describe a &quot;queuing&quot; variant of the PRAM model, which we
propose as a more appropriate model for currently available parallel
shared-memory machines than traditional PRAM models.</p>

<!-- ====================================================================== -->

<hr><h2 align=center><a name="wilson">
Extensible Languages, Open Compilers, and Reflection</a></h2>
<h2 align=center><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><!WA40><a href="http://www.cs.utexas.edu/users/wilson">Paul Wilson</a></h2>

<p>Extensible languages allow interesting new features to be added to
a language portably, from within the language itself.</p>

<p>Open compilers allow fairly easy modification of compilers to add
new features, analyses, and optimizations.</p>

<p>Reflection allows a program to examine a representation of
interesting parts of itself, and affect its own structure
accordingly.</p>

<p>I'll discuss these things, why they're useful for building modular,
portable, and adapatable software.  I'll also discuss our recent work
on the RScheme compiler, an open compiler for an extensible
language.</p>

<!-- ====================================================================== -->

<hr>
<ADDRESS>
Last modified: November 15, 1996<br>
<!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><!WA41><a href="http://www.cs.utexas.edu/users/rdb">Robert Blumofe</a><br>
<!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><!WA42><a href="mailto:rdb@cs.utexas.edu">rdb@cs.utexas.edu</a>
</ADDRESS>

</BODY>
</HTML>
