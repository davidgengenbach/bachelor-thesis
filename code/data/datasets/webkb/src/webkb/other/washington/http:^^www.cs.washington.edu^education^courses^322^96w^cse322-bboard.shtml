Date: Wed, 08 Jan 1997 20:53:29 GMT
Server: NCSA/1.4.2
Content-type: text/html

<html> 
<head>
<title>CSE 322 Bboard/Mail Log
</title>
</head>

<body>
<h1>CSE 322 Formal Models<br>
    Bboard/Mail Log
<br>
    Winter 1996
</h1>

This page contains a log of all email sent to the CSE322 class
mailing list <a href="mailto:cse322@cs.washington.edu"><tt>cse322@cs</tt></a>.  
We will use this list for
announcements of general interest to the class.  Students should
also feel free to use it to ask questions, post information, or
initiate discussions  of general interest to the class.  Of course,
questions or comments that don't seem of general interest can be
directed to the TA 
(<a href="mailto:fix@cs.washington.edu"><tt>fix@cs</tt></a>) or instructor
(<a href="mailto:ladner@cs.washington.edu"><tt>ladner@cs</tt></a>), instead.  
<p> 
Following usual Internet conventions, administrative requests
concerning the mailing list itself, such as add/delete/address
change requests, should be addressed to 
<a href="mailto:cse322-request@cs.washington.edu"><tt>cse322-request@cs</tt></a>.

<h2>Index of Messages</h2>
(Latest message Friday, 05-Jan-96 11:14:18 PST.)
<p>
<ul>
<li><a href=#820869253001><tt> 5 Jan 96 ladner@cs _____ Book problem</tt></a>
<li><a href=#820879907001><tt> 5 Jan 96 fix@cs ________ Welcome to CSE 322</tt></a>
<li><a href=#821056630001><tt> 7 Jan 96 gracelee@cs ___ Re: Welcome to CSE 322</tt></a>
<li><a href=#821121656001><tt> 8 Jan 96 ladner@cs _____ Student Question</tt></a>
<li><a href=#821125527001><tt> 8 Jan 96 ladner@cs _____ Correction in book.</tt></a>
<li><a href=#821208096001><tt> 9 Jan 96 ladner@cs _____ Student Question on #12 page 39</tt></a>
<li><a href=#821337194001><tt>10 Jan 96 sca@cs ________ assign# 2</tt></a>
<li><a href=#821387667001><tt>11 Jan 96 ladner@cs _____ Student Question</tt></a>
<li><a href=#821392620001><tt>11 Jan 96 xyzzy@u _______ Re: Student Question</tt></a>
<li><a href=#821431481001><tt>11 Jan 96 marcam@u ______ HW#2, prob3</tt></a>
<li><a href=#821447985001><tt>12 Jan 96 alxchin@cs ____ Re: HW#2, prob3</tt></a>
<li><a href=#821468642001><tt>12 Jan 96 ladner@cs _____ Re: HW#2, prob3 </tt></a>
<li><a href=#821494798001><tt>12 Jan 96 ladner@cs _____ Student Solutions Book</tt></a>
<li><a href=#821561128001><tt>13 Jan 96 ladner@cs _____ Tuesday office hours</tt></a>
<li><a href=#822343275001><tt>22 Jan 96 ladner@cs _____ Error in Handout</tt></a>
<li><a href=#822344834001><tt>22 Jan 96 fix@cs ________ Re: hw4</tt></a>
<li><a href=#822348549001><tt>22 Jan 96 fix@cs ________ Study Section</tt></a>
<li><a href=#822682148001><tt>26 Jan 96 ladner@cs _____ Midterm Exam</tt></a>
<li><a href=#822688441001><tt>26 Jan 96 ladner@cs _____ Correction in Assignment 5</tt></a>
<li><a href=#822691719001><tt>26 Jan 96 fix@cs ________ Correction on HW#3 solns</tt></a>
<li><a href=#822936787001><tt>29 Jan 96 ladner@cs _____ Re: Midterm Exam </tt></a>
<li><a href=#822965574001><tt>29 Jan 96 fix@cs ________ Solutions to assignment 4...</tt></a>
<li><a href=#823293355001><tt> 2 Feb 96 ladner@cs _____ Resumes</tt></a>
<li><a href=#823303061001><tt> 2 Feb 96 ladner@cs _____ Bottom-down?</tt></a>
<li><a href=#823628947001><tt> 6 Feb 96 ladner@cs _____ Why context-free</tt></a>
<li><a href=#823648432001><tt> 6 Feb 96 ladner@cs _____ Textbook Error</tt></a>
<li><a href=#823798882001><tt> 8 Feb 96 ladner@cs _____ Office hours today</tt></a>
<li><a href=#823822918001><tt> 8 Feb 96 ladner@cs _____ Lazowska &quot;almost live&quot;</tt></a>
<li><a href=#823824925001><tt> 8 Feb 96 fix@cs ________ reminder about DFAs</tt></a>
<li><a href=#824413747001><tt>15 Feb 96 fix@cs ________ DFA equivalence question</tt></a>
<li><a href=#825108836001><tt>23 Feb 96 fix@cs ________ hw9 corrections/clarification</tt></a>
<li><a href=#825392357001><tt>26 Feb 96 fix@cs ________ question about behavioral lemmas..... </tt></a>
<li><a href=#825393828001><tt>26 Feb 96 fix@cs ________ More HW9 corrections/clarifications</tt></a>
<li><a href=#826228482001><tt> 7 Mar 96 ladner@cs _____ Homework 10, problem 1</tt></a>
<li><a href=#826320874001><tt> 8 Mar 96 ladner@cs _____ Unclaimed homeworks</tt></a>
<li><a href=#826331590001><tt> 8 Mar 96 fix@cs ________ 322 stuff</tt></a>
<li><a href=#826574627001><tt>11 Mar 96 ladner@cs _____ Star-Free Expression</tt></a>
<li><a href=#826599356001><tt>11 Mar 96 fix@cs ________ Office Hours on Tuesday</tt></a>
<li><a href=#826654872001><tt>12 Mar 96 fix@cs ________ Homework 10</tt></a>
<li><a href=#826657881001><tt>12 Mar 96 ladner@cs _____ Re: determinism of parsing </tt></a>
<li><a href=#826825411001><tt>14 Mar 96 ladner@cs _____ Final Exams and Grades</tt></a>
<li><a href=#827185471001><tt>18 Mar 96 ladner@cs _____ Grading Done</tt></a>

</ul>

<pre>

</pre>
<hr>
<h2>Messages</h2>
<pre>
<hr size=4><a name="820869253001">To: cse322@cs
Subject: <b>Book problem</b>
Date: Fri, 05 Jan 1996 11:14:09 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>

Students,

For some reason the bookstore removed the old versions
of Sudkamp from the shelf.  

After talking with them, they agreed to sell the old version
with the option of exchanging it for the new version in
a couple of weeks.  You can exchange your old version
with the new version if you keep your old version
in mint condition.

If you have not yet bought a book, you can do so by 
going to the text book desk and asking for it.

Because of the mix up with the book, the assignment
due tomorrow can be turned in Monday. 

Richard

<hr size=4><a name="820879907001">Date: Fri, 5 Jan 1996 14:11:34 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: cse322@cs.washington.edu
Subject: <b>Welcome to CSE 322</b>
</a>


If you have received this message by email, you are on the email
list for 322: cse322@cs.washington.edu.  

If you did NOT receive this message by email (and presumably are
reading it on the course web), then you are NOT on the email list.  

Following usual Internet conventions, administrative requests
concerning the mailing list itself, such as add/delete/address
change requests, should be addressed to

    cse322-request@cs
          ^^^^^^^^

stating your desires.  

We will use this list for announcements of general interest to the
class.  Students should also feel free to use it to ask or answer
questions, post information, or initiate discussions of general
interest to the class.  Of course, questions or comments that don't
seem of general interest can be directed to the TA (fix@cs) or
instructor (ladner@cs), instead. 

All mail sent to the list is also automatically logged to the course
web, so you can, for example, scroll back to older messages that
you didn't save but want to review.

Hope you enjoy the course!


<hr size=4><a name="821056630001">Date: Sun, 7 Jan 1996 15:17:05 -0800 (PST)
From: <b>Grace S Lee &lt;gracelee@grizzly.cs.washington.edu&gt;</b>
To: James Fix &lt;fix@cs.washington.edu&gt;
cc: cse322@grizzly.cs.washington.edu
Subject: <b>Re: Welcome to CSE 322</b>
</a>


	I don't know if anyone has the same difficulty to get the 
textbook as I do. I went to the bookstore on Friday, and they already 
ran out of the books (the wrong one), and I checked in the library 
yesterday but they didn't have any either. Is it possible to postpone 
homework for those like me? Thanks.

Grace :)

**************************************************
* University of Washington                       *
* Seattle, WA                                    *
* Computer Science                               *
* (Tel) 633-2085                                 *
* gracelee@grizzly.cs.washington.edu		 *
* http://www.cs.washington.edu/homes/gracelee/   *
**************************************************
<hr size=4><a name="821121656001">To: cse322@cs
Subject: <b>Student Question</b>
Date: Mon, 08 Jan 1996 09:20:52 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>

Question:

   Hi. In a lot of the recursive definitions for infinite sets (like 
natural numbers or something) it says in the closure part that every 
element in the set has to be obtained through a finite number of 
applications of the s(n) operation. How can a set be infinite if every 
element in it is obtained from one element, or a finite number of 
applications of an operation on that element? 

Sam

Answer:

The beauty of an inductive (or recursive) definition is that
an infinite set of objects can be defined from a purely
finite description (or algorithm).  Each object in the
infinite set is &quot;well founded,&quot; that is, is built up from
some basis objects using just a finite number of applications
of the inductive rules.

Why are there an infinite number of objects given by
such definitions?  Basically, because there are an infinite
number of different ways that objects can be constructed from
the basis objects.

In the simple example of A^*, there is only one basis
object, lambda.  A new member can be constructed by
concatenating a member of A to the right of an already
existing member of A^*.  If a is in A then we can obtain
the infinite set lambda, a, aa, aaa, aaaa, ... by such
a process.
<hr size=4><a name="821125527001">To: cse322@cs
Subject: <b>Correction in book.</b>
Date: Mon, 08 Jan 1996 10:25:20 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


As pointed out to me by student Paul Kromann, the third
and fourth lines in the derivation in example 1.4.1 on
page 15 are missing right parentheses.

For example line three should read:

 = s(s(s(s(s(0))) + 0))

In the future, if you find what you suspect is an error 
in the book, send it to me or Jim for verification and
we will post it to the class.

Thanks to Paul for starting this all out.
<hr size=4><a name="821208096001">To: cse322@cs
Subject: <b>Student Question on #12 page 39</b>
Date: Tue, 09 Jan 1996 09:21:31 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>

Question:

On #12, does the 'total number of b's and c's is three' mean: 
a) There are 3 b's and there are three c's
 or 
b) The number of b's + number of c's = 3?
Thanks!

Answer:

My reading of this question is b) above.
<hr size=4><a name="821337194001">Date: Wed, 10 Jan 1996 21:13:11 -0800 (PST)
From: <b>Just like the Lager &lt;sca@wolf.cs.washington.edu&gt;</b>
To: cse322@wolf.cs.washington.edu
Subject: <b>assign# 2</b>
</a>

  Does anyone know what 3b is asking for? That just doesn't make 
any sense to me. Also, does anyone have a good way to check and 
see if your regular expressions are correct? Thanks.

Sam
<hr size=4><a name="821387667001">To: cse322@cs
Subject: <b>Student Question</b>
Date: Thu, 11 Jan 1996 11:14:22 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>

Question:

  Does anyone know what 3b is asking for? That just doesn't make 
any sense to me. Also, does anyone have a good way to check and 
see if your regular expressions are correct? Thanks.

Sam

Answers:

There are two questions:

1. Take for example the equation 

X = {a, \lambda}X \union {\lambda}.

One solution is X = {a}^*, but another is, for example,
X = {a}^*{b} \union {a}^*.  That is, the set equation may
have more than one solution.  In this case, the solution
X = {a}^* is a subset of all other solutions.  Your problem
is to explain why this is the case more generally.

2. How do you check that a regular expression is correct.
This can generally be quite hard.  This method does not
guarantee correctness, but may find errors.

Give your expression to a friend or several friends.
If they find an error, then simply give a counterexample,
that is, either a string not covered by the expression or
a string which is in the regular language covered by the
expression but is not in the language.



<hr size=4><a name="821392620001">Date: Thu, 11 Jan 1996 12:35:02 -0800 (PST)
From: <b>Trent Piepho &lt;xyzzy@u.washington.edu&gt;</b>
To: cse322@cs.washington.edu
Subject: <b>Re: Student Question</b>
</a>

On Thu, 11 Jan 1996, Richard Ladner wrote:
&gt; 2. How do you check that a regular expression is correct.
&gt; This can generally be quite hard.  This method does not
&gt; guarantee correctness, but may find errors.

You can also use that regex library(s) that are part of most UNIX C
libraries.  Do a man regex to see how.  It uses a almost identical syntax to
the one we learned in class.  You could then type in a load of strings that
should be in the language and let it check them for you.

|Gazing up to the breeze of the heavens \ on a quest, meaning, reason  |
|came to be, how it begun \ all alone in the family of the sun         |
|curiosity teasing everyone \ on our home, third stone from the sun.   |
|Trent Piepho (xyzzy@u.washington.edu)                   -- Metallica  |

<hr size=4><a name="821431481001">Date: Thu, 11 Jan 1996 23:24:39 -0800 (PST)
From: <b>&quot;M. Mauger&quot; &lt;marcam@u.washington.edu&gt;</b>
To: cse322@cs.washington.edu
Subject: <b>HW#2, prob3</b>
</a>


This is probably too late, but...

What the heck does the equation in question 3 mean??

X=AX U B

All I can think of is the fact that X must be the same set on both sides 
of the equation, which means A must be the empty set, and B must be a 
subset of X.  But this makes a) and b) trivial, and doesn't make much 
sense given the posted discussion on this problem, which I also don't 
understand much of.  For example, an example of the equation is given as:
	X = {a, /lambda}X U {/lambda}

So the element a concacenated with the longest element in X results in a 
new element NOT in X, making the equation impossible.  Of course, I am 
thinking of this equation ultimately as X = X U B, which is surely 
wrong.  Anyone up this late that can explain this one to me?  I would 
greatly appreciate any help.


==========================================================

&quot;Bite me. It's fun!&quot;
		-Crow T Robot

==========================================================

<hr size=4><a name="821447985001">Date: Fri, 12 Jan 1996 03:59:42 -0800 (PST)
From: <b>Alex Chin &lt;alxchin@grizzly.cs.washington.edu&gt;</b>
To: &quot;M. Mauger&quot; &lt;marcam@u.washington.edu&gt;
cc: cse322@cs.washington.edu
Subject: <b>Re: HW#2, prob3</b>
</a>


  Verify that X = A*B is a solution to the equation by
  substitution.  See if you can make both sides of the
  equation look identical through a series of identities.

On Thu, 11 Jan 1996, M. Mauger wrote:

&gt; 
&gt; This is probably too late, but...
&gt; 
&gt; What the heck does the equation in question 3 mean??
&gt; 
&gt; X=AX U B
&gt; 
&gt; All I can think of is the fact that X must be the same set on both sides 
&gt; of the equation, which means A must be the empty set, and B must be a 
&gt; subset of X.  But this makes a) and b) trivial, and doesn't make much 
&gt; sense given the posted discussion on this problem, which I also don't 
&gt; understand much of.  For example, an example of the equation is given as:
&gt; 	X = {a, /lambda}X U {/lambda}
&gt; 
&gt; So the element a concacenated with the longest element in X results in a 
&gt; new element NOT in X, making the equation impossible.  Of course, I am 
&gt; thinking of this equation ultimately as X = X U B, which is surely 
&gt; wrong.  Anyone up this late that can explain this one to me?  I would 
&gt; greatly appreciate any help.
&gt; 
&gt; 
&gt; ==========================================================
&gt; 
&gt; &quot;Bite me. It's fun!&quot;
&gt; 		-Crow T Robot
&gt; 
&gt; ==========================================================
&gt; 
&gt; 
<hr size=4><a name="821468642001">To: cse322@cs
cc: marcam@u.washington.edu
Subject: <b>Re: HW#2, prob3 </b>
In-reply-to: Your message of &quot;Thu, 11 Jan 1996 23:24:39 PST.&quot;
             &lt;Pine.A32.3.91j.960111232351.136204A-100000@homer28.u.washington.edu&gt; 
Date: Fri, 12 Jan 1996 09:43:57 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>

Question:

What the heck does the equation in question 3 mean??

X=AX U B

All I can think of is the fact that X must be the same set on both sides 
of the equation, which means A must be the empty set, and B must be a 
subset of X.  But this makes a) and b) trivial, and doesn't make much 
sense given the posted discussion on this problem, which I also don't 
understand much of.  For example, an example of the equation is given as:
	X = {a, /lambda}X U {/lambda}

So the element a concacenated with the longest element in X results in a 
new element NOT in X, making the equation impossible.  Of course, I am 
thinking of this equation ultimately as X = X U B, which is surely 
wrong.  Anyone up this late that can explain this one to me?  I would 
greatly appreciate any help.


Answer:

This is the kind of question you should ask as
early as possible. Part a) gives at least one
solution to the equation and part b) is not trivial because there
may be many different solutions to the equation.
<hr size=4><a name="821494798001">To: cse322@cs
Subject: <b>Student Solutions Book</b>
Date: Fri, 12 Jan 1996 16:59:50 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


There is a Student's Solutions Manual to Sudkamp's book.
I have ordered some for the bookstore and they should
arrive in a couple of weeks.  In the meantime, I will
hand out some copies for chapters 2 and 3 in class
on Wednesday.  I cannot copy the whole book without
violating copyright laws.

Richard 
<hr size=4><a name="821561128001">To: cse322@cs
Subject: <b>Tuesday office hours</b>
Date: Sat, 13 Jan 1996 11:25:22 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


Students in CSE 322.

Something important has come up and I cannot make my Tuesday
11 - 12 office hour on January 16th.

I will hold a special office hour from 3 - 4 on Tuesday,
Jan 16th instead.

I hope that this is not inconvenient for you.

Richard
<hr size=4><a name="822343275001">To: cse322@cs
Subject: <b>Error in Handout</b>
Date: Mon, 22 Jan 1996 12:41:08 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


A student pointed out a slight error in the handout 
&quot;Construction of Regular Grammars from Regular Expressions.&quot;
In case 2 we should remove the A -&gt; lambda productions from
G_alpha before and not after adding the new productions.
Otherwise a problem would arise if bouth S_alpha -&gt; lambda
and S_beta -&gt; lambda were both productions in the original
grammars.  

I will show you the correction in class on Wednesday, or you
can get a preview sometime today when Jim puts the handout
on the Web.

This is a subtle error and it is good to see a student find it.

Richard
<hr size=4><a name="822344834001">Date: Mon, 22 Jan 1996 13:07:03 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: Andrew Petty &lt;ahp@u.washington.edu&gt;
cc: cse322@dandelion.cs.washington.edu
Subject: <b>Re: hw4</b>
</a>



On Fri, 19 Jan 1996, Andrew Petty wrote:

&gt;  
&gt; Problem 1: 
&gt; 
&gt; (i) We turn-in the derivation tree only, or also the
&gt;     line by line derivation?

You can either turn in the line-by-line derivation *or* the derivation 
tree.  Your choice.  (I'm partial to the tree, since it saves my hands
from too much writing)

&gt; 
&gt; (ii) It takes several rules to derive,
&gt;      &lt;expression&gt; =*=&gt; &lt;letter&gt; =&gt; x 
&gt;      Since we have to do this for x, y, z can we just put a * next to the
&gt;      child arrow that points to the end result (once it has been 
&gt;      previously derived) ? Shouldn't there also be some note by the star
&gt;       reading something like 'by steps a thru n' (this would require
&gt;      labeling the relavent child arrows on the tree)? What do you suggest.
&gt; 
Any well-documented shorthand is fine, as long as you have gone through
some version of the derivation of a single-letter variable at least once, 
and your shorthand is very clear.

&gt; (iii) In example 3.6.2 p67 there is a sub-derivation;
&gt;      &lt;identifier&gt; =&gt; &lt;letter&gt;&lt;identifier tail&gt; =&gt; x&lt;identifier tail&gt; =&gt; x
&gt;      In the Pascal lang. spec, I dont see anything like
&gt;      &lt;identifier tail&gt;.  Did I miss it? Instead I see
&gt;      &lt;identifier&gt; =&gt; &lt;letter&gt;{&lt;letter or digit&gt;}.  If I want only one 
&gt;      x do I write &lt;identifier&gt; =&gt; &lt;letter&gt;{&lt;letter or digit&gt;} =&gt; 
&gt;      x{&lt;letter&gt;} =&gt; x (since I take {u} to mean zero or more reps of 
&gt;      u)?  Or can I just write 
&gt;           &lt;identifier&gt; =&gt; &lt;letter&gt; =&gt; x ?
&gt;      What is the proper way to terminate an identifier?
&gt; 
&gt;      Maybe your response will also answer this:
&gt; 
&gt;      If I want to derive 12 from &lt;unsigned integer&gt;
&gt;      do I write 
&gt;      &lt;unsigned integer&gt; =&gt; &lt;digit&gt;{&lt;digit&gt;} =&gt; 1 {&lt;digit&gt;} =&gt; 12
&gt; 
&gt; Sorry for such a long message....
Good observation.  Grammars in BNF are slightly different than context free
grammars as we have defined them since they include the bracket notation
{&lt;stuff&gt;}, which means concatenate &lt;stuff&gt; 0 or more times.   The intro
to appendix II discusses this issue.  One thing: you should convince yourself
that BNF grammars can be easily converted to our CFGs.  For example,
in the homework, replace the following BNF productions with their CFG 
equivalents:

BNF:
&lt;unsigned integer&gt; -&gt; &lt;digit&gt; { &lt;digit&gt; }
CFG:
&lt;unsigned integer&gt; -&gt; &lt;digit&gt; | &lt;digit&gt; &lt;digits&gt;
&lt;digits&gt; -&gt; &lt;digit&gt; &lt;digits&gt; | \lambda

BNF:
&lt;identifier&gt; -&gt; &lt;letter&gt; { &lt;letter or digit&gt; }
CFG:
&lt;identifier&gt; -&gt; &lt;letter&gt; &lt;identifier tail&gt;
&lt;identifier tail&gt; -&gt; &lt;letter or digit&gt; &lt;identifier tail&gt; | \lambda

where \lambda is the empty string.  You can use these CFG productions
instead of the BNF ones to answer problem 1.

Hope this helps.

-j

<hr size=4><a name="822348549001">Date: Mon, 22 Jan 1996 14:09:02 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: cse322@dandelion.cs.washington.edu
Subject: <b>Study Section</b>
</a>



Starting tomorrow, I'll be holding an informal study section every week.
My plan is to do any of the following:

	a) go over some of the questions from previous homeworks
	b) do some example questions from the book that are related
	   to the upcoming homework or to material previously covered 
	   in class
	c) answer random questions
	d) cover any general techniques (proofs by induction, set notation)
	e) answer random questions

the time and place:

	Tues. 2:30-3:30p
	Sieg 231

If you can't make it at this time because of another class, please
send me mail so I can keep track of you.

-j

<hr size=4><a name="822682148001">To: cse322@cs
Subject: <b>Midterm Exam</b>
Date: Fri, 26 Jan 1996 10:48:50 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


For the midterm exam on Wednesday, Jan 31, bring an 11 x 8 1/2 inch
blue book with 24 pages.

You may use the first 6 pages of the blue book for notes to 
help you during the exam.  Your notes must be handwritten
in the book.

Otherwise the exam is closed book.

The exam will cover the following chapters and sections
in the book.

Chapter 1, especially sections 1.3 and 1.6.
Chapter 2, all sections
Chapter 3, all sections
Chapter 4, sections 4.1

You should also know how to convert a regular expression to
a regular grammar and how to execute the top-down parsing
method.

Good luck on the exam.

Richard L.
<hr size=4><a name="822688441001">To: cse322@cs
Subject: <b>Correction in Assignment 5</b>
Date: Fri, 26 Jan 1996 12:33:12 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


The production T -&gt; F*E should by T -&gt; F*T instead.

I will correct this on the Web version of the
problem set.

Sorry for any inconvenience.

Richard
<hr size=4><a name="822691719001">Date: Fri, 26 Jan 1996 13:28:27 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: cse322@dandelion.cs.washington.edu
Subject: <b>Correction on HW#3 solns</b>
</a>


While we're admitting our mistakes:

In the section rambling about set notation, the third expression 

     *          &lt;=== times
{a,b} {c}

should read

     +          &lt;== plus
{a,b} {c}

Since there are strictly more than 0 a's or b's.  (i &gt; 0)


My apologies,
-j

	
<hr size=4><a name="822936787001">To: David Shaw &lt;daveshaw@wolf.cs.washington.edu&gt;
cc: cse322@cs
Subject: <b>Re: Midterm Exam </b>
In-reply-to: Your message of &quot;Sat, 27 Jan 1996 21:02:47 PST.&quot;
             &lt;Pine.ULT.3.91.960127210220.28610C-100000@wolf.cs.washington.edu&gt; 
Date: Mon, 29 Jan 1996 09:32:35 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


Question:

I haven't bought the blue book yet, but do you mean each side of the page 
count as 1 page?

Answer:

Yes, six pages if your were to number the pages
1 to 24 in the blue book.
I don't believe it would benefit you to write
more notes, as writing 6 pages means you have
to think about discriminating the important
stuff from the less important stuff.

Richard
<hr size=4><a name="822965574001">Date: Mon, 29 Jan 1996 17:32:46 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: cse322@dandelion.cs.washington.edu
Subject: <b>Solutions to assignment 4...</b>
</a>


...are sitting in the &quot;handouts&quot; bins outside Prof. Ladner's office.  Get 
them while they're hot.  My apologies for the delay-- these problems were a 
bit involved as you all know.

They will also be put on-line, as will the corrections to solutions #1 
&amp; 3 that were discussed in class today.

Please let me know if you find any problems or have any questions--

-j
<hr size=4><a name="823293355001">To: cse322@cs
Subject: <b>Resumes</b>
Date: Fri, 02 Feb 1996 12:35:46 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


I mentioned the student resume list in class to day, but I forgot
to mention it is run by the Student Chapter of the Washington
Software Association (WSA).  There is a small fee for joining WSA
before your resume can be posted.  I think it might be worth
the small fee to post your resume.

Richard Ladner
<hr size=4><a name="823303061001">To: cse322@cs
Subject: <b>Bottom-down?</b>
Date: Fri, 02 Feb 1996 15:17:22 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


Question:

While you've got me in pine... The homework assignment asks for a 
bottom-down parse. Do you really want a bottom-up parse?

Answer:

If you should do bottom-down you will no doubt drown, so better
try bottom-up as described in class today.
<hr size=4><a name="823628947001">To: weidai@eskimo.com
cc: cse322@cs
Subject: <b>Why context-free</b>
Date: Tue, 06 Feb 1996 09:48:46 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


Question:
 
Can you explain what the &quot;context-free&quot; part of &quot;context-free 
language&quot; means?  I can't figure out what context it is refering to.

Answer:

In the early days of grammar research there was interest
in other kinds of grammars.  For example, you could
imagine a production of the form AB -&gt; CDE.  That is,
if you see the string AB in a sentential form, then you
can make a derivation step that replaces the AB with CDE.
Context-free grammar do not allow these kinds of productions.
The &quot;context&quot; refers to there being more than one symbol to
match when doing a derivation step.

<hr size=4><a name="823648432001">To: cse322@cs
Subject: <b>Textbook Error</b>
Date: Tue, 06 Feb 1996 15:13:43 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


A student pointed out the following error in the
text.  Exercise 29 on page 68.  The question refers to a language that is the set of all 
strings with a positive, even number of a's over {a,b}, and describes it 
with the regular expression (b^*ab^*ab^*)^*. The question also refers to 
the grammar:
		S -&gt; AA
		A -&gt; AAA | bA | Ab | a.

Since the empty string is in the language defined by the
expression and not in the language generated by the grammar,
then it is impossible to prove they are equivalent.
To make them equivalent just add the production S -&gt; lambda
or change the expression to (b^*ab^*ab^*)^+.


<hr size=4><a name="823798882001">To: cse322@cs
Subject: <b>Office hours today</b>
Date: Thu, 08 Feb 1996 09:01:14 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


I may be 15 minutes late for my office hour today.

Richard Ladner
<hr size=4><a name="823822918001">To: cse322@cs
Subject: <b>Lazowska &quot;almost live&quot;</b>
Date: Thu, 08 Feb 1996 15:41:47 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


I highly recommend you see this lecture!

Richard Ladner

---------------------------

University of Washington Presents the 20th Annual Faculty Lecture

&quot;A Half Century of Exponential Progress in Information Technology:
Who, What, When, Why and How&quot;

Professor Edward Lazowska
Chair, Department of Computer Science and Engineering

Watch UWTV, cable channel 27, on the following dates:
March 3, 8pm
March 10, 8pm
March 17, 9pm
March 24, 9pm

This program was recorded February 6 on the University of Washington campus.
<hr size=4><a name="823824925001">Date: Thu, 8 Feb 1996 16:15:20 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: cse322@dandelion.cs.washington.edu
Subject: <b>reminder about DFAs</b>
</a>


Just a reminder about the definition of DFAs:

When you are constructing your DFAs for HW 6, remember that
delta is a _function_ Q x Sigma -&gt; Q and must be fully defined.
This means that for every state in Q, there should be _exactly one_
transition from that state for every character.  

On page 142, the book gives an example of a DFA where the
transition function is not complete (6.3.7) but then converts it
to a fully specified DFA (6.3.8) by adding an &quot;error&quot; state.  You
may need to do the same for some of the DFAs on the homework.

Once again, the general rule is:

	For a DFA, every state must have one outgoing arrow for 
        every character in the alphabet.

-j

<hr size=4><a name="824413747001">Date: Thu, 15 Feb 1996 11:47:49 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: sliqyboy &lt;sliqyboy@ix.netcom.com&gt;
cc: maiohmai@cs.washington.edu, cse322@dandelion.cs.washington.edu
Subject: <b>DFA equivalence question</b>
</a>


&gt; 
&gt; Q:  If a DFA accepts the language described by a regular expression, is 
&gt; it possible for the DFA to also accept strings that are not described 
&gt; by that regular expresssion?
&gt; 
&gt;     As a corollary... if you had to generate a DFA that accepts the 
&gt; language described by a regular expression, do you also have to ensure 
&gt; that the DFA rejects strings that are not in the language described by 
&gt; the regular expression.
&gt; 

Yes that's right, when you are determining whether a DFA accepts exactly the 
language described by a regular expression you need to ensure two things:
     1. that the DFA accepts the strings in the language described by the 
        regular expression
     2. that the DFA rejects the strings not in the language described by the
	regular expression.
Equivalently, you can show the following:
     1. every string accepted by the DFA is in the language described by 
        the regular expression
     2. every string in the language described by the regular expression
        is accepted by the DFA.
Note that these are just ways of showing that the two languages are equal.

It's real easy to find a DFA that satisfies only one of these two conditions:
the DFA that accepts every string of the alphabet trivially will accept any
string in a language described by a regular expression-- but it accepts
other strings as well.

This same reasoning explains why the behavioral lemma of problem 1 in
homework 7 is an &quot;if and only if&quot;-- to show that the construction of M 
from G is correct we need to say that it accepts _exactly_ L(G).

-j
<hr size=4><a name="825108836001">Date: Fri, 23 Feb 1996 12:53:51 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: cse322@dandelion.cs.washington.edu
Subject: <b>hw9 corrections/clarification</b>
</a>


In problem 1, the text should read:

&quot;...Think of L as the set of arbitrary shuffles of strings from L(M1) and
                                   ^^^^^^^^
L(M_2).  For example, if aab is in L(M1) and bb is in L(M2) then
                     ^^
the strings aabbb, ababb, bbabb and many other strings are in L...&quot;


Also, you should notice (from the example) that in the definition of L,
the x_i's and y_i's are strings, not characters.  That's why the
language L contains shuffles of strings in L(M1) and L(M2) rather 
than just interleavings.

-j
<hr size=4><a name="825392357001">Date: Mon, 26 Feb 1996 19:39:12 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: cse322@dandelion.cs.washington.edu
Subject: <b>question about behavioral lemmas..... </b>
</a>



---------- Forwarded message ----------
Date: Mon, 26 Feb 1996 19:38:33 -0800 (PST)
From: James Fix &lt;fix@dandelion.cs.washington.edu&gt;
To: Jason Murray &lt;jmur@grizzly.cs.washington.edu&gt;
Subject: Re: question about behavioral lemmas.....


Regarding Friday's lecture:

&gt; Dr. Ladner was talking today about how we could not use q_not_prime and 
&gt; q_not in out behavioral lemma for the last homework.  I'm still not clear 
&gt; why this is.  My confusion comes from the example he did in class 
&gt; involving suffixes.  He was able to use q_not and q_not_prime in his 
&gt; behavioral lemma.  
&gt; 

One reason you might not want to refer to specific states in a behavioral 
lemma is due to the application of the induction hypothesis to prove the 
lemma.  For example, in the reversal problem, what you most likely wanted 
for a behavioral lemma was something that said that processing x in M' was
similar (in some way) to processing x^R in M.  Something like:

	for all p,q,x [p,x] |-*M' [q,lambda] iff [q,x^R] |-*M [p,lambda]

The inductive step for this would involve looking at this as
	[p,x] |-nM' [r,a] |-M' [q,lambda]
for some state r, ya =x, and invoking the induction hypothesis to say that
	[p,y^R] |-nM' [r,lambda].

If you instead fix p and q and state the B.L this way:
	
	for all x, p in F, [p,x] |-*M' [q0,lambda] iff [q0,x^r] |-M [p,lambda]

Then, you get in trouble because even though
	[p,x] |-*M' [r,a] |-M' [q0,lambda]
for some r in p, ya = x, you cannot conclude that
	[p,x] |-*M' [r,a]
from your induction hypothesis because your inductive hypothesis says nothing
about general r, just r in F.  It's too specific.

The reasons for how much you want to specify vs. generalize your B.L. are
somewhat analagous to the reasons for choosing strong vs. weak induction--
a general B.L. is more powerful and potentially more useful but may not 
be necessary:
	* a general B.L.  is more powerful because it says something
	  about more things.  You may need to prove the more general 
          version to get a clean inductive proof.  Often, a more general BL
	  is nicer because it says a lot about your construction of an M'.
	* a more specific B.L. is fine as long as:
		a) you can actually prove it without having to prove
                   the general B.L. in the process
		b) you can actually use it to prove the overall theorem
		   that you're trying to prove

In the suffix example in class, only the specific B.L. was necessary and
a more general B.L. was not obvious.

Hope this explanation wasn't too general,
-j




<hr size=4><a name="825393828001">Date: Mon, 26 Feb 1996 20:03:39 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: Jason Murray &lt;jmur@grizzly.cs.washington.edu&gt;
cc: cse322@dandelion.cs.washington.edu
Subject: <b>More HW9 corrections/clarifications</b>
</a>


In case you weren't sure, problem 3 should read:

&quot;...prove this by contradiction from first principles.&quot;

---------------------------------------------------------------------------
A question:
&gt; Since &quot;bbabb&quot; is in string L, is &quot;a&quot; or &quot;aaa&quot; also in string L?

oops.  No, bbabb, a, aaa are not necessarily in L, given only that aab 
and bb are in L.  See below for the correction.

Another:
&gt; I can't see how the third of the three examples bbabb can be constructed 
&gt; from aab and bb.
&gt; 
&gt; Am I missing something?
&gt; 

No, you're absoultely right.  The question should read:

&quot;...L(M_2).  For example, if aab is in L(M1) and bb is in L(M2) then
 the strings aabbb, ababb, bbaab and many other strings are in L...&quot;
                           ^^^^^
Sorry I did not catch this.  bbabb is not necessarily an element of L
since the number of a's and b's in it differs from the number of a's and 
b's in aab and bb combined.

--------------------------------------------------------------------------
The reason bbaab is in L is that, the xi's and yi's in the set expression 
can be lambdas.  So one way of getting the string bbaab to fit the 
set pattern is to let 

	n  := 2
	x1 := lambda
	x2 := aab
	y1 := bb
        y2 := lambda

In this way, we get (x1)(y1)(x2)(y2) = (lambda)(bb)(aab)(lambda) = bbaab,
and (x1)(x2) = aab and (y1)(y2)  = bb

Just to make this more clear, ababb is in L because if we let:
	
	n  := 3
	x1 := a
	x2 := a
	x3 := b
        y1 := b
	y2 := b
        y3 := lambda

we get (x1)(y1)(x2)(y2)(x3)(y3) = (a)(b)(a)(b)(b)(lambda) = ababb and
(x1)(x2)(x3) = aab and (y1)(y2)(y3) = bb.
        
--------------------------------------------------------------------------

Sorry for missing these before, I'll correct them on the web,
-j






<hr size=4><a name="826228482001">To: cse322@cs
Subject: <b>Homework 10, problem 1</b>
Date: Thu, 07 Mar 1996 11:54:33 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


Instead of building a DPDA for the set of strings
with an equal number of a's as b's do it for the
following set.

L = {xc : x has an equal number of a's as b's}

L is in the alphabet {a,b,c}.

This small change will help you a lot.

Richard 
<hr size=4><a name="826320874001">To: cse322@cs
Subject: <b>Unclaimed homeworks</b>
Date: Fri, 08 Mar 1996 13:34:25 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


Sorry about the confusion getting homework 9 back
to you after class today.

I have 10 or so unclaimed homeworks from problem
sets 1 through 9.   I you would like to have
your homework back, please come by my office to pick
it up.  You can come by anytime, but you can
be sure I'll be in my office during my Monday-Tuesday
office hours from 11:00 to 12:00.

Richard
<hr size=4><a name="826331590001">Date: Fri, 8 Mar 1996 16:32:55 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: cse322@dandelion.cs.washington.edu
Subject: <b>322 stuff</b>
</a>


Folks,

Just a reminder that my Study/Review Section will be
in Sieg 325 on Monday from 4:30-5:50.

Prof. Ladner will also be holding office hours 
on Monday and Tuesday from 11-12.

-j



<hr size=4><a name="826574627001">To: cse322@cs
Subject: <b>Star-Free Expression</b>
Date: Mon, 11 Mar 1996 12:03:36 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


You may have been wondering what the star-free
expression is for (ab)^*.  Let e be the
empty set, then it is the 

complement of the union of

(a e^-^-
(e^- b)^-
e^- a a e^-
e^- b b e^-.

To see this first recognize that e^- is simply
{a,b}^*.  Second, realize that
a string is not in (ab)^* if and only if

it does not begin with an a or
it does not end with a b or
it has two a's in a row or
it has two b's in a row.

Richard

<hr size=4><a name="826599356001">Date: Mon, 11 Mar 1996 18:55:39 -0800 (PST)
From: <b>James Fix &lt;fix@dandelion.cs.washington.edu&gt;</b>
To: cse322@dandelion.cs.washington.edu
Subject: <b>Office Hours on Tuesday</b>
</a>


I've decided to add office hours starting at 12pm in room 326.  Stop by 
if you have final questions.

-j
<hr size=4><a name="826654872001">Date: Tue, 12 Mar 1996 10:21:04 -0800 (PST)
From: <b>James Fix &lt;fix@cappuccino.cs.washington.edu&gt;</b>
To: cse322@cappuccino.cs.washington.edu
Subject: <b>Homework 10</b>
</a>


Homework 10 is graded.  If you'd like to pick it up before
the exam, stop by Prof. Ladner's office sometime today.

Send me email if you have any questions, or see you at 12 in 326,
-j
<hr size=4><a name="826657881001">To: cse322@cs
Subject: <b>Re: determinism of parsing </b>
In-reply-to: Your message of &quot;Tue, 12 Mar 1996 10:59:48 PST.&quot;
             &lt;Pine.ULT.3.91.960312105341.21716B-100000@wolf.cs.washington.edu&gt; 
Date: Tue, 12 Mar 1996 11:11:11 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>



Question:

Didn't you mention in class a parsing method that was deterministic?

I thought bottom-up parsing was, but I'm incorrect, right?  Both top-down 
and bottom-up parsing are not deterministic, right?

If you did mention a parsing method that was deterministic (something 
about look ahead 1), should we review it?

Answer:

The parsing methods I described, top-down and bottom-up,
are nondeterministic.  However, if the grammar has the
right properties then one or both methods can be
made to be deterministic.  To make them deterministic
may require lookahead and the creation of many states.

I did mention in class that the bottom-up parsing method
is more generally used because it can handle more
context-free languages than the top-down method
and the grammars it handles tend to be nicer.

I mentioned several times that there are context-free
languages which are inherently nondeterministic.  Every
PDA accepting such a language is nondeterministic.

What I did not mention is that there is a parsing method,
that is never used in practice, which can parse any
context-free grammar.  This parsing method takes O(n^3)
time and is not practical.  it is a cool method though.

Richard
<hr size=4><a name="826825411001">To: cse322@cs
Subject: <b>Final Exams and Grades</b>
Date: Thu, 14 Mar 1996 09:43:25 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


As I mentioned at the final exam, I do not put out the
finals nor do I post grades.  

If you want your final back, and I hope you do, please
drop by my office anytime next quarter.  I would be 
very happy to see you.  

If you are anxious about your grade please send me e-mail
on or after Tuesday, March 19th, and I can reply with your
grade.

Have a good quarter break.  Maybe I will see you on the
slopes of Crystal Mountain, on March  22nd, 23rd or 24th.

Richard Ladner
<hr size=4><a name="827185471001">To: cse322@cs
cc: ladner@whalespout
Subject: <b>Grading Done</b>
Date: Mon, 18 Mar 1996 13:44:12 PST
From: <b>Richard Ladner &lt;ladner@whalespout.cs.washington.edu&gt;</b>
</a>


I have completed the grading.  Final exams are available
from me in my office, 311 Sieg Hall.

Course stats:

Average grade: 3.4
Average Final Score: 71% 
Average Midterm Score: 81%
Average Homework Score 81% with 211 total points 

For the Final the highest score was 99% and the lowest 38%.
Final scores in the ranges:

90 - 100  6
80 - 89   6
70 - 79  15
60 - 69   7
50 - 59   6
40 - 49   3
30 - 39   1
-----------
total    44

I hope to see you when you pick up your exam.

Richard Ladner


</pre>
</body>
<hr>
<address>
<a href="mailto:ladner@cs.washington.edu">ladner@cs.washington.edu</a>
<br>
<a href="mailto:fix@cs.washington.edu">fix@cs.washington.edu</a>
<br>
(Last Update: 
   <!-- see man strftime for full formatting options-->
  01/03/96)
</address>

</html>
