MIME-Version: 1.0
Server: SPIN
Content-Type: text/html

<HTML>
<HEAD>
<TITLE>SPIN WEB SERVER</TITLE>
<!-- Changed by: Wilson Hsieh, 29-Sep-1996 -->

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z">
</HEAD>
<BODY>
<P>
<!WA0><!WA0><!WA0><!WA0><A HREF="http://www-spin.cs.washington.edu/www/external/members.html"><!WA1><!WA1><!WA1><!WA1><IMG SRC="http://www-spin.cs.washington.edu/www/pics/spinlogo.gif" ALT="SPIN LOGO IMAGE"></A>
<P>
<!WA2><!WA2><!WA2><!WA2><A HREF="mailto:spin@cs.washington.edu">spin@cs.washington.edu</A>
<H1>Welcome to the SPIN Web Server running on SPIN </H1>
<P>
You have connected to a machine at the University of Washington
running the real live SPIN Operating System. Our Web server runs
as a dynamically linked extension on top of the SPIN kernel. It
relies on a set of system extensions, most notably disk extents,
UNIX like sockets, file-system, and networking support. The Figure
below shows the system configured with several extensions used
by the Web server.  Our server is structured as a three-level
cache - memory, fast extent based file system, and a remote NFS
server. On a miss to the memory cache, the local extent file system
is queried.  On a miss there, the files are fetched from a remote
NFS server.  This structure allows us to optimize our disk layout
for fast contiguous reads.<BR>
<P>
<CENTER><!WA3><!WA3><!WA3><!WA3><IMG SRC="http://www-spin.cs.washington.edu/IMG00001.GIF"></CENTER>
<P>
The Web server exports some <!WA4><!WA4><!WA4><!WA4><A HREF="http://www-spin.cs.washington.edu/commands.html">commands </A>that
you can send to the running SPIN OS. They show information on
the number of threads, the set of instantiated domains, and the
state of the heap, for example. For more information about SPIN,
please read on. 
<HR>
<H1>The SPIN Operating System</H1>
<P>
SPIN is an extensible operating system kernel that supports the
dynamic adaptation of system interfaces and implementations through
direct application control, while still maintaining system integrity
and inter-application isolation. SPIN allows applications to load
code into the kernel at runtime. Because it runs in the kernel,
this extension code can access hardware and other operating systems
services with almost no overhead (basically a procedure call),
and data can be passed by reference, rather than copied. The SPIN
kernel itself provides a core set of interfaces and capabilities
to basic resources. These are used by collections of extensions
to implement general system services such as address spaces, IPC,
threads, and networking. All extension code (and most of the kernel)
is written in the type safe language Modula-3. The property of
type safety prevents extensions from crashing the system by attempting
to manipulate arbitrary pieces of code or data. SPIN runs on DEC
Alpha workstations. We're using it to write both specialized applications
such as network video systems, as well as for supporting general
purpose UNIX programs. 
<H2>Quick Results </H2>
<P>
This structure allows programs to extend operating system services
with low overhead. For example, with SPIN running on a 133 MHz
Alpha, an application can handle and recover from a page fault
in 29 microseconds. It takes 22 microseconds to create a new thread
of control, execute it, terminate, and synchronize with its termination
(fork/join). A protected procedure call to another extension or
to a kernel function takes .13 microseconds. A cross-machine RPC
(application to application) over Ethernet takes under 600 microseconds;
over ATM (on really old adapters) it takes less than 450 microseconds.
The same operations under Mach or Digital UNIX take up to 30 times
longer on the same hardware. Time them yourself (or see our <!WA5><!WA5><!WA5><!WA5><A HREF="http://www-spin.cs.washington.edu/www/external/bench/latest/index.html">benchmarks </A>page
and save yourself the effort). 
<H2>Recent reports and papers </H2>
<P>
<!WA6><!WA6><!WA6><!WA6><A HREF="http://www-spin.cs.washington.edu/www/papers/SOSP95/sosp95.ps">Extensibility, Safety and Performance in the SPIN Operating System </A>
<P>
A design, implementation and performance paper. Appeared in the
15th SOSP. 
<P>
<!WA7><!WA7><!WA7><!WA7><A HREF="http://www-spin.cs.washington.edu/www/papers/Usenix96/extprotarch.ps">An Extensible Protocol Architecture for Application-Specific Networking </A>
<P>
A design, implementation and performance paper. Appeared in 1996
USENIX Winter Conference. 
<P>
<!WA8><!WA8><!WA8><!WA8><A HREF="http://www-spin.cs.washington.edu/www/papers/WCS/m3os.ps">Writing an Operating System Using Modula-3 </A>
<P>
Describes our experiences using Modula-3 to build a high performance
extensible system. Makes clear the distinction between a language
and its implementation. 
<P>
<!WA9><!WA9><!WA9><!WA9><A HREF="http://www-spin.cs.washington.edu/www/papers/WCS/language.ps">Language Support for Extensible Operating Systems </A>
<P>
We've been pretty happy with M3, but we've had to deal with a
few shortcomings in order to use the language in a safe extensible
operating system. This paper describes how we've addressed those
shortcomings. 
<P>
<!WA10><!WA10><!WA10><!WA10><A HREF="http://www-spin.cs.washington.edu/www/papers/WCS/domain.ps">Safe Dynamic Linking in an Extensible Operating System </A>
<P>
Describes the dynamic linker we use to load code into the kernel.
Key point is the ability to create and manage linkable name spaces
that describe interfaces and collections of interfaces. 
<P>
<!WA11><!WA11><!WA11><!WA11><A HREF="http://www-spin.cs.washington.edu/www/papers/WCS/dispatcher.ps">Language and Runtime Support for Dynamic Interposition of System Code </A>
<P>
Describes the kernel's internal communication and extension facilities.
Shows use of dynamic code generation to improve the performance
of a critical kernel service. 
<H2>More Information </H2>
<P>
<!WA12><!WA12><!WA12><!WA12><A HREF="http://www-spin.cs.washington.edu/www/papers/index.html">Paper trail </A>: Project Reports,
Talks. Papers, etc. 
<P>
<!WA13><!WA13><!WA13><!WA13><A HREF="http://www-spin.cs.washington.edu/www/external/members.html">Project members </A>:Who we
are. 
<P>
<!WA14><!WA14><!WA14><!WA14><A HREF="http://www-spin.cs.washington.edu/www/external/bench/latest/index.html">Benchmarks</A>:
Interested in the bottom-line? Go here. 
<P>
<!WA15><!WA15><!WA15><!WA15><A HREF="http://www-spin.cs.washington.edu/www/external/modula3/index.html">Modula-3 </A>: Information
on Modula-3. 
<P>
<!WA16><!WA16><!WA16><!WA16><A HREF="http://www-spin.cs.washington.edu/www/ARPA/index.html">ARPA Project Overview </A>: The
executive summary and regular reports. 
<P>
<!WA17><!WA17><!WA17><!WA17><A HREF="http://www-spin.cs.washington.edu/www/external/acks.html">Our friends </A>: We've gotten
a lot of assistance from academia and industry on this project.
This page says who we're involved with. 
<P>
<!WA18><!WA18><!WA18><!WA18><A HREF="http://www-spin.cs.washington.edu/www/external/relwork.html">Some related projects </A>:
Pointers to other extensible systems projects. 
<P>
<!WA19><!WA19><!WA19><!WA19><A HREF="file://www-spin.cs.washington.edu//afs/cs.washington.edu/project/spin/www/Internal/index.html">Internal Documentation </A>:
The latest status for project members 
<P>
<!WA20><!WA20><!WA20><!WA20><A HREF="http://www-spin.cs.washington.edu/www/taz/index.html">Our mascot </A>: We're encouraged
that so many people have decided to adopt our mascot as their
own. 
<P>
This page maintained by <!WA21><!WA21><!WA21><!WA21><A HREF="mailto:bershad@cs.washington.edu">Brian Bershad</A>.
</BODY>
</HTML>
